{"version":3,"sources":["TableAndDetail.js","serviceWorker.js","index.js"],"names":["TableAndDetail","props","state","tableData","detailData","sortKey","sortDir","sortChars","showPage","id","manufacturer","model","price","mpg","enginesize","horsepower","wheelbase","passengers","fetch","then","result","json","setState","prevSortKey","newSortKey","prevSortDir","length","event","carId","this","newSortDir","setSortDir","k","Number","isInteger","sort","a","b","localeCompare","class","onClick","e","showAll","className","map","entry","index","key","showCar","href","sortColumn","showTable","showDetail","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a27978c5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass TableAndDetail extends React.Component {\r\n    state = {\r\n        tableData: [],\r\n        detailData: {},\r\n        sortKey: \"\",\r\n        sortDir: \"\",\r\n        sortChars: {},\r\n        showPage: \"\",\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state.sortChars = {id:\"↑\", manufacturer:\"↕\", model:\"↕\", price:\"↕\", mpg:\"↕\",\r\n                                enginesize:\"↕\", horsepower:\"↕\", wheelbase:\"↕\", passengers:\"↕\"};\r\n        this.state.sortKey = \"id\";\r\n        this.state.sortDir = \"asc\";\r\n        this.state.showPage = \"table\";\r\n    }\r\n\r\n    // Load the table data from the API endpoint once the component is mounted\r\n    componentDidMount() {\r\n        fetch(\"https://api.danwritesandcodes.com/cars/allcars\")\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    tableData: result,\r\n                })\r\n            })\r\n    }\r\n\r\n    // Return the sort direction for the selected column based on the column and\r\n    // current sort direction for the column\r\n    setSortDir(prevSortKey,newSortKey,prevSortDir) {\r\n        // Same sort key, previous sort direction is ascending (asc), new direction is desc\r\n        if ((prevSortKey.length > 0) && (prevSortKey===newSortKey) && (prevSortDir===\"asc\")) {\r\n            return \"desc\";\r\n        }\r\n\r\n        // Same sort key, previous sort direction is descending (desc), new direction is asc\r\n        if ((prevSortKey.length > 0) && (prevSortKey===newSortKey) && (prevSortDir===\"desc\")) {\r\n            return \"asc\";\r\n        }\r\n\r\n        // Otherwise new direction is asc\r\n        return \"asc\";\r\n    }\r\n\r\n    // Sort the tableData table by the selected column\r\n    showCar(event, carId) {\r\n        fetch(\"https://api.danwritesandcodes.com/cars/id/\"+carId)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    detailData: result[0],\r\n                    showPage: \"detail\"\r\n                })\r\n            })\r\n    }\r\n\r\n    // Sort the tableData table by the selected column\r\n    showAll(event) {\r\n        this.setState({ showPage: \"table\" });\r\n    }\r\n\r\n    // Sort the tableData table by the selected column\r\n    sortColumn(event, newSortKey) {\r\n        const tableData = this.state.tableData;\r\n        const sortChars = this.state.sortChars;\r\n\r\n        // Set the new sort direction\r\n        const newSortDir = this.setSortDir(this.state.sortKey,newSortKey,this.state.sortDir);\r\n\r\n        // Sort the column tableData ascending or descending based on current table\r\n        // state, sort key, and whether the column is integer or string tableData\r\n        if (Number.isInteger(tableData[0][newSortKey]) && newSortDir === \"asc\") {\r\n            tableData.sort((a,b) => a[newSortKey] - b[newSortKey])\r\n        } else if (Number.isInteger(tableData[0][newSortKey]) && newSortDir === \"desc\") {\r\n            tableData.sort((a,b) => b[newSortKey] - a[newSortKey])\r\n        } else if (newSortDir === \"asc\") {\r\n            tableData.sort((a,b) => a[newSortKey].localeCompare(b[newSortKey]))\r\n        } else {\r\n            tableData.sort((a,b) => b[newSortKey].localeCompare(a[newSortKey]))\r\n        }\r\n\r\n        // Set the sort keys\r\n        for (let k in sortChars) { sortChars[k] = \" \"; };\r\n        if (newSortDir === \"desc\") {\r\n            sortChars[newSortKey] = \"↓\";\r\n        } else {\r\n            sortChars[newSortKey] = \"↑\";\r\n        }\r\n\r\n        // Set the state using the new sorted tableData\r\n        this.setState({tableData:tableData,\r\n                       sortKey:newSortKey,\r\n                       sortDir:newSortDir,\r\n                       sortChars:sortChars});\r\n    }\r\n\r\n    // Display detailed information for one car\r\n    showDetail() {\r\n        const { detailData } = this.state;\r\n\r\n        return <div>\r\n            <h1 class=\"display-4\">1993 {detailData.manufacturer} {detailData.model}</h1>\r\n            <button class=\"btn btn-primary btn-xs\" onClick={e => this.showAll()}>View all cars</button>\r\n            <div className=\"table-responsive\">\r\n            <table className=\"table\">\r\n            <thead></thead>\r\n            <tbody>\r\n            <tr><td>Id</td><td>{detailData.id}</td></tr>\r\n            <tr><td>Manufacturer</td><td>{detailData.manufacturer}</td></tr>\r\n            <tr><td>Model</td><td>{detailData.model}</td></tr>\r\n            <tr><td>Price</td><td>${detailData.price}</td></tr>\r\n            <tr><td>Mpg</td><td>{detailData.mpg}</td></tr>\r\n            <tr><td>Engine Size</td><td>{detailData.enginesize} cc</td></tr>\r\n            <tr><td>Horsepower</td><td>{detailData.horsepower} hp</td></tr>\r\n            <tr><td>Wheelbase</td><td>{detailData.wheelbase} in</td></tr>\r\n            <tr><td>Passengers</td><td>{detailData.passengers}</td></tr>\r\n            </tbody>\r\n            </table></div></div>\r\n    }\r\n\r\n    // Show a data table that lists all 93 cars in the database\r\n    showTable() {\r\n        const { tableData, sortChars } = this.state;\r\n\r\n        const result = tableData.map((entry, index) => {\r\n            return <tr key={\"row\"+entry.id}>\r\n                <td key={entry.id}><button onClick={e => this.showCar(e, entry.id)} class=\"btn btn-primary btn-xs\">{entry.id}</button></td>\r\n                <td key={entry.id+entry.manufacturer}>{entry.manufacturer}</td>\r\n                <td key={entry.id+entry.model}>{entry.model}</td>\r\n                <td key={entry.id+entry.price}>{entry.price}</td>\r\n                <td key={entry.id+entry.mpg}>{entry.mpg}</td>\r\n                <td key={entry.id+entry.enginesize}>{entry.enginesize}</td>\r\n                <td key={entry.id+entry.horsepower}>{entry.horsepower}</td>\r\n                <td key={entry.id+entry.wheelbase}>{entry.wheelbase}</td>\r\n                <td key={entry.id+entry.passengers}>{entry.passengers   }</td></tr>\r\n        })\r\n\r\n        return <div>\r\n            <h1 class=\"display-4\">1993 Cars</h1>\r\n            <p class=\"lead\">A simple presentation of the <a href=\"https://www.rdocumentation.org/packages/MASS/versions/7.3-51.5/topics/Cars93\">Cars 93 database</a>. Click anywhere in the row for detailed information on a car. Click a column header to sort a column, click again to reverse the sort.</p>\r\n            <div className=\"table-responsive\">\r\n            <table className=\"table table-striped\">\r\n            <thead>\r\n            <tr>\r\n            <th onClick={e => this.sortColumn(e, 'id')}>Id{sortChars.id}</th>\r\n            <th onClick={e => this.sortColumn(e, 'manufacturer')}>Manufacturer{sortChars.manufacturer}</th>\r\n            <th onClick={e => this.sortColumn(e, 'model')}>Model{sortChars.model}</th>\r\n            <th onClick={e => this.sortColumn(e, 'price')}>Price{sortChars.price}</th>\r\n            <th onClick={e => this.sortColumn(e, 'mpg')}>Mpg{sortChars.mpg}</th>\r\n            <th onClick={e => this.sortColumn(e, 'enginesize')}>Engine Size{sortChars.enginesize}</th>\r\n            <th onClick={e => this.sortColumn(e, 'horsepower')}>Horsepower{sortChars.horsepower}</th>\r\n            <th onClick={e => this.sortColumn(e, 'wheelbase')}>Wheelbase{sortChars.wheelbase}</th>\r\n            <th onClick={e => this.sortColumn(e, 'passengers')}>Passengers{sortChars.passengers}</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>{result}</tbody>\r\n            </table></div></div>\r\n    }\r\n\r\n\r\n    // Render the full data table for 93 cars or detailed information for one car\r\n    render() {\r\n        if (this.state.showPage === \"table\") {\r\n            return this.showTable();\r\n        } else {\r\n            return this.showDetail();\r\n        }\r\n    }\r\n}\r\n\r\nexport default TableAndDetail;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TableAndDetail from './TableAndDetail.js';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<DatatablePage />, document.getElementById('root'));\n// ReactDOM.render(<div><DatatablePage /><h2>This is PlainTable</h2><PlainTable /></div>, document.getElementById('root'));\nReactDOM.render(<div>\n                <TableAndDetail/>\n                </div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}